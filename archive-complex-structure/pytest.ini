# ATHintel Test Configuration
# Comprehensive test automation framework setup for Phase 3 energy assessment platform

[tool:pytest]
# Minimum version required
minversion = 8.0

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Output options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --showlocals
    --durations=10
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=85
    --junit-xml=junit.xml
    --maxfail=5
    --disable-warnings

# Async support
asyncio_mode = auto

# Markers for test categorization
markers =
    # Test types
    unit: Unit tests
    integration: Integration tests
    functional: Functional tests
    e2e: End-to-end tests
    
    # Performance and load tests
    performance: Performance tests
    slow: Slow running tests (>10s)
    load: Load tests
    stress: Stress tests
    
    # Security tests
    security: Security tests
    vulnerability: Vulnerability tests
    penetration: Penetration tests
    
    # Component-specific tests
    api: API endpoint tests
    database: Database tests
    scraping: Web scraping tests
    analytics: Analytics and ML tests
    energy: Energy assessment tests
    investment: Investment analysis tests
    
    # Infrastructure tests
    resilience: Resilience pattern tests
    circuit_breaker: Circuit breaker tests
    retry: Retry mechanism tests
    
    # Environment-specific tests
    smoke: Smoke tests for basic functionality
    regression: Regression tests
    compatibility: Compatibility tests
    
    # External dependencies
    external: Tests requiring external services
    network: Tests requiring network access
    
    # Test stability
    flaky: Tests that may be unstable
    skip_on_ci: Skip these tests in CI environment

# Timeout configuration
timeout = 300
timeout_method = thread

# Logging configuration for tests
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d - %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Warnings configuration
filterwarnings =
    # Ignore specific warnings that are not actionable
    ignore::DeprecationWarning:pkg_resources.*
    ignore::PendingDeprecationWarning:asyncio.*
    ignore::RuntimeWarning:aiomultiprocess.*
    
    # Convert warnings to errors for our code
    error::UserWarning:src.*
    error::FutureWarning:src.*
    
    # Security warnings should always be visible
    default::SecurityWarning
    
    # Performance warnings
    default::PerformanceWarning

# Test selection and execution
collect_ignore = [
    "setup.py",
    "scripts/",
    docs/
    .tox/
    .env/
    venv/
    node_modules/